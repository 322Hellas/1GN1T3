/*  frontend/src/js/canvas/konvaEngine.js  */

import Konva from "konva";
import { addSlide } from "./slideManager.js";
import { enableSelection } from "./selectionManager.js";

let stage;
let gridLayer;          // holds faint grid lines
let gridVisible = false;

let zoomToolActive = false;   // middle-mouse zoom on/off

/* -------------------------------------------------- */
/*  Public: initCanvas                                */
/* -------------------------------------------------- */
export function initCanvas() {
  stage = new Konva.Stage({
    container: "canvasWrapper",
    width:  1280,
    height: 720
  });

  addSlide(stage);               // first blank slide

  // create grid layer (hidden by default)
  gridLayer = new Konva.Layer({ listening: false, visible: false });
  stage.add(gridLayer);
  drawGridLines();

  /* wheel zoom: only active when zoomToolActive === true */
  stage.on("wheel", e => {
    if (!zoomToolActive) return;
    e.evt.preventDefault();

    const oldScale = stage.scaleX();
    const pointer  = stage.getPointerPosition();
    const mousePointTo = {
      x: (pointer.x - stage.x()) / oldScale,
      y: (pointer.y - stage.y()) / oldScale,
    };

    const direction = e.evt.deltaY > 0 ? 1 : -1;
    const scaleBy = 1.15;
    const newScale = direction > 0 ? oldScale / scaleBy : oldScale * scaleBy;

    stage.scale({ x: newScale, y: newScale });

    const newPos = {
      x: pointer.x - mousePointTo.x * newScale,
      y: pointer.y - mousePointTo.y * newScale
    };
    stage.position(newPos);
    stage.batchDraw();
  });
}

/* -------------------------------------------------- */
/*  Public: getStage                                  */
/* -------------------------------------------------- */
export function getStage() {
  return stage;
}

/* -------------------------------------------------- */
/*  Public: toggleGrid                                */
/* -------------------------------------------------- */
export function toggleGrid() {
  gridVisible = !gridVisible;
  gridLayer.visible(gridVisible);
  gridLayer.batchDraw();
}

/* -------------------------------------------------- */
/*  Public: toggleZoomTool                            */
/* -------------------------------------------------- */
export function toggleZoomTool() {
  zoomToolActive = !zoomToolActive;
  const wrapper = document.getElementById("canvasWrapper");
  wrapper.style.cursor = zoomToolActive ? "zoom-in" : "default";
}

/* -------------------------------------------------- */
/*  Helper: draw faint grid                           */
/* -------------------------------------------------- */
function drawGridLines() {
  const step = 40;                 // px between lines
  const w = stage.width();
  const h = stage.height();

  for (let x = step; x < w; x += step) {
    gridLayer.add(new Konva.Line({
      points: [x, 0, x, h],
      stroke: "#dcdcdc",
      strokeWidth: 1
    }));
  }
  for (let y = step; y < h; y += step) {
    gridLayer.add(new Konva.Line({
      points: [0, y, w, y],
      stroke: "#dcdcdc",
      strokeWidth: 1
    }));
  }
  gridLayer.draw();
}
